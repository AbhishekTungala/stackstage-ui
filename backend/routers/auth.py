from fastapi import APIRouter, HTTPException, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from models.schemas import AuthRequest, AuthResponse
import os
from typing import Optional

router = APIRouter()
security = HTTPBearer()

# Initialize Firebase Admin SDK (simplified for development)
def initialize_firebase():
    try:
        import firebase_admin
        from firebase_admin import credentials, auth
        
        if not firebase_admin._apps:
            # For development, use default credentials or service account
            firebase_config = os.getenv("FIREBASE_CONFIG")
            if firebase_config:
                import json
                cred = credentials.Certificate(json.loads(firebase_config))
            else:
                # For development without credentials
                return None
            
            firebase_admin.initialize_app(cred)
        return True
    except Exception as e:
        print(f"Firebase initialization warning: {e}")
        return None

# Try to initialize Firebase
firebase_initialized = initialize_firebase()

async def verify_firebase_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Verify Firebase ID token"""
    try:
        if not firebase_initialized:
            # For development without Firebase
            return {"uid": "dev_user", "email": "dev@stackstage.com"}
            
        from firebase_admin import auth
        token = credentials.credentials
        decoded_token = auth.verify_id_token(token)
        return decoded_token
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Invalid authentication token: {str(e)}")

@router.post("/login", response_model=AuthResponse)
async def login(auth_data: AuthRequest):
    """Firebase authentication login endpoint"""
    try:
        if not auth_data.email or not auth_data.password:
            raise HTTPException(status_code=400, detail="Email and password are required")
        
        # Firebase authentication is typically handled on the frontend
        # This endpoint is mainly for validation and user info retrieval
        return AuthResponse(
            success=True,
            message="Login validation successful. Complete authentication on frontend.",
            token=None,  # Token will be generated by Firebase on frontend
            user_id=None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Authentication failed: {str(e)}")

@router.post("/signup", response_model=AuthResponse)
async def signup(auth_data: AuthRequest):
    """Firebase authentication signup endpoint"""
    try:
        if not auth_data.email or not auth_data.password:
            raise HTTPException(status_code=400, detail="Email and password are required")
        
        # Firebase user creation is typically handled on the frontend
        # This endpoint is mainly for validation
        return AuthResponse(
            success=True,
            message="Signup validation successful. Complete registration on frontend.",
            token=None,
            user_id=None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Signup failed: {str(e)}")

@router.get("/verify")
async def verify_token(user_data = Depends(verify_firebase_token)):
    """Verify Firebase ID token and return user info"""
    return {
        "valid": True,
        "user_id": user_data.get("uid"),
        "email": user_data.get("email"),
        "verified": user_data.get("email_verified", False)
    }

@router.get("/health")
async def auth_health():
    """Health check for auth endpoint"""
    return {"status": "operational", "service": "authentication"}