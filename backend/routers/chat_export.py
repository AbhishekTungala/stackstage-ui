from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from datetime import datetime
from typing import List, Dict, Any
import json
from io import BytesIO
import base64
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch

router = APIRouter()

class ChatExportRequest(BaseModel):
    messages: List[Dict[str, Any]]
    session_info: Dict[str, Any] = {}
    export_format: str = "pdf"

@router.post("/pdf")
async def export_chat_pdf(request: ChatExportRequest):
    """Export chat conversation to professional PDF"""
    
    try:
        # Create PDF buffer
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        
        # Styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#1a56db')
        )
        
        user_style = ParagraphStyle(
            'UserMessage',
            parent=styles['Normal'],
            fontSize=11,
            spaceBefore=12,
            spaceAfter=8,
            leftIndent=20,
            borderColor=colors.HexColor('#e5e7eb'),
            borderWidth=1,
            borderPadding=10,
            backColor=colors.HexColor('#f9fafb')
        )
        
        assistant_style = ParagraphStyle(
            'AssistantMessage',
            parent=styles['Normal'],
            fontSize=11,
            spaceBefore=12,
            spaceAfter=8,
            leftIndent=20,
            borderColor=colors.HexColor('#1a56db'),
            borderWidth=1,
            borderPadding=10,
            backColor=colors.HexColor('#eff6ff')
        )
        
        # Build content
        story = []
        
        # Header
        story.append(Paragraph("StackStage Cloud Intelligence", title_style))
        story.append(Paragraph("Enterprise AI Assistant Chat Export", styles['Heading2']))
        story.append(Spacer(1, 20))
        
        # Export metadata
        export_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        metadata_data = [
            ['Export Date:', export_time],
            ['Session Duration:', f"{len(request.messages)} messages"],
            ['Role:', request.session_info.get('role', 'Cloud Architect')],
            ['Region:', request.session_info.get('region', 'Global')]
        ]
        
        metadata_table = Table(metadata_data, colWidths=[2*inch, 4*inch])
        metadata_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f3f4f6')),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb'))
        ]))
        
        story.append(metadata_table)
        story.append(Spacer(1, 30))
        
        # Chat messages
        story.append(Paragraph("Conversation History", styles['Heading2']))
        story.append(Spacer(1, 15))
        
        for i, message in enumerate(request.messages):
            if message.get('type') == 'user':
                story.append(Paragraph(f"<b>You:</b> {message.get('content', '')}", user_style))
            elif message.get('type') == 'assistant':
                story.append(Paragraph(f"<b>StackStage AI:</b> {message.get('content', '')}", assistant_style))
                
                # Add suggestions if available
                suggestions = message.get('suggestions', [])
                if suggestions:
                    story.append(Spacer(1, 5))
                    story.append(Paragraph("<b>Suggested Follow-ups:</b>", styles['Normal']))
                    for suggestion in suggestions[:3]:  # Limit to 3 suggestions
                        story.append(Paragraph(f"â€¢ {suggestion}", styles['Normal']))
            
            story.append(Spacer(1, 10))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#6b7280'),
            alignment=1  # Center alignment
        )
        story.append(Paragraph("Generated by StackStage Cloud Intelligence Platform", footer_style))
        story.append(Paragraph("Enterprise-grade AI for cloud architecture and DevOps", footer_style))
        
        # Build PDF
        doc.build(story)
        
        # Get PDF data
        pdf_data = buffer.getvalue()
        buffer.close()
        
        # Return base64 encoded PDF
        pdf_base64 = base64.b64encode(pdf_data).decode('utf-8')
        
        return {
            "success": True,
            "pdf_data": pdf_base64,
            "filename": f"stackstage-chat-{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
            "export_date": export_time,
            "message_count": len(request.messages)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to generate PDF: {str(e)}")

@router.post("/formats")
async def get_export_formats():
    """Get available export formats"""
    return {
        "formats": [
            {
                "id": "pdf",
                "name": "PDF Report",
                "description": "Professional PDF with formatting and branding",
                "mime_type": "application/pdf"
            },
            {
                "id": "txt",
                "name": "Plain Text",
                "description": "Simple text format",
                "mime_type": "text/plain"
            }
        ]
    }

@router.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "chat_export"}