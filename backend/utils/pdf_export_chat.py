"""PDF Export utilities for chat conversations"""

import io
from datetime import datetime
from typing import List, Dict, Any
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT

def generate_chat_pdf(messages: List[Dict[str, str]]) -> bytes:
    """Generate PDF from chat conversation"""
    
    # Create a file-like buffer to receive PDF data
    buffer = io.BytesIO()
    
    # Create the PDF object
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                          rightMargin=72, leftMargin=72,
                          topMargin=72, bottomMargin=18)
    
    # Container for the 'Flowable' objects
    story = []
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=HexColor('#1a1a1a')
    )
    
    user_style = ParagraphStyle(
        'UserMessage',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        leftIndent=20,
        backgroundColor=HexColor('#f0f9ff'),
        borderColor=HexColor('#0ea5e9'),
        borderWidth=1,
        borderPadding=8
    )
    
    assistant_style = ParagraphStyle(
        'AssistantMessage',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        leftIndent=20,
        backgroundColor=HexColor('#f0fdf4'),
        borderColor=HexColor('#22c55e'),
        borderWidth=1,
        borderPadding=8
    )
    
    system_style = ParagraphStyle(
        'SystemMessage',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=12,
        leftIndent=20,
        backgroundColor=HexColor('#f8fafc'),
        borderColor=HexColor('#64748b'),
        borderWidth=1,
        borderPadding=8,
        textColor=HexColor('#475569')
    )
    
    # Title
    story.append(Paragraph("StackStage AI Assistant Conversation", title_style))
    story.append(Spacer(1, 20))
    
    # Export info
    info_style = ParagraphStyle(
        'InfoText',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=15,
        alignment=TA_CENTER,
        textColor=HexColor('#6b7280')
    )
    
    story.append(Paragraph(f"Exported on {datetime.now().strftime('%B %d, %Y at %I:%M %p')}", info_style))
    story.append(Paragraph(f"Total Messages: {len(messages)}", info_style))
    story.append(Spacer(1, 20))
    
    # Messages
    for i, message in enumerate(messages, 1):
        role = message.get('role', 'unknown')
        content = message.get('content', '')
        
        # Choose style based on role
        if role == 'user':
            msg_style = user_style
            role_prefix = "üë§ User:"
        elif role == 'assistant':
            msg_style = assistant_style
            role_prefix = "ü§ñ StackStage AI:"
        else:
            msg_style = system_style
            role_prefix = f"‚öôÔ∏è {role.title()}:"
        
        # Add message with role prefix
        story.append(Paragraph(f"<b>{role_prefix}</b><br/>{content}", msg_style))
        
        # Add page break every 8 messages to avoid overly long pages
        if i % 8 == 0 and i < len(messages):
            story.append(PageBreak())
    
    # Footer
    story.append(Spacer(1, 30))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=9,
        alignment=TA_CENTER,
        textColor=HexColor('#6b7280')
    )
    story.append(Paragraph("Generated by StackStage - Cloud Architecture Analysis Platform", footer_style))
    
    # Build PDF
    doc.build(story)
    
    # Get the value of the BytesIO buffer and return it
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

def export_chat_pdf(messages: List[Dict[str, str]]) -> str:
    """Export chat to PDF file and return file path (legacy function)"""
    import tempfile
    import os
    
    pdf_bytes = generate_chat_pdf(messages)
    
    # Create temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    temp_file.write(pdf_bytes)
    temp_file.close()
    
    return temp_file.name