import { useState } from "react";
import { Link } from "wouter";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { 
  Download, 
  Share2, 
  Mail, 
  MessageSquare, 
  FileText,
  Copy,
  CheckCircle,
  Send,
  ExternalLink
} from "lucide-react";

const Share = () => {
  const [copied, setCopied] = useState(false);
  const [emailData, setEmailData] = useState({
    to: "",
    subject: "StackStage Architecture Analysis Report",
    message: "Please find the attached architecture analysis report for review."
  });

  const reportSummary = {
    overallScore: 78,
    criticalIssues: 2,
    warnings: 4,
    monthlySavings: 570,
    analysisDate: new Date().toLocaleDateString()
  };

  const markdownReport = `# StackStage Architecture Analysis Report

**Analysis Date:** ${reportSummary.analysisDate}
**Overall Health Score:** ${reportSummary.overallScore}/100

## Executive Summary

Your cloud infrastructure analysis has been completed. We identified ${reportSummary.criticalIssues} critical security issues and ${reportSummary.warnings} optimization opportunities that could save you $${reportSummary.monthlySavings}/month.

## Key Findings

### ðŸ”´ Critical Issues (${reportSummary.criticalIssues})
- **S3 Bucket Public Read Access**: Your S3 bucket allows public read access which could expose sensitive data
- **RDS Instance Without Encryption**: Database instance is not encrypted at rest

### ðŸŸ¡ Optimization Opportunities (${reportSummary.warnings})
- **Oversized EC2 Instances**: Several instances are oversized for current utilization (Save: $450/month)
- **Unused EBS Volumes**: 3 unattached volumes found (Save: $120/month)
- **Missing CloudFront CDN**: Static assets served directly from S3
- **Suboptimal Instance Types**: Consider newer generation instances

## Recommendations

### Immediate Actions Required
1. Enable S3 bucket public access blocking
2. Enable RDS encryption at rest
3. Remove unused EBS volumes

### Cost Optimization
1. Downsize EC2 instances based on utilization
2. Implement CloudFront for static content delivery
3. Migrate to newer instance types for better price-performance

## Next Steps

1. Review and implement critical security fixes
2. Plan cost optimization changes for next maintenance window
3. Monitor improvements with StackStage continuous monitoring

---
*Generated by StackStage - Build with Confidence*
`;

  const copyReport = () => {
    navigator.clipboard.writeText(markdownReport);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const integrations = [
    {
      name: "Slack",
      icon: MessageSquare,
      description: "Send report to Slack channel",
      action: "Connect Slack"
    },
    {
      name: "Notion",
      icon: FileText,
      description: "Create Notion page with findings",
      action: "Connect Notion"
    },
    {
      name: "Jira",
      icon: ExternalLink,
      description: "Create Jira tickets for issues",
      action: "Connect Jira"
    }
  ];

  return (
    <div className="min-h-screen bg-background">
      <Header />
      
      <main className="pt-24 pb-16">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-bold text-foreground mb-4">
              Share & Export 
              <span className="text-gradient"> Report</span>
            </h1>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              Share your architecture analysis with your team and stakeholders.
            </p>
          </div>

          {/* Report Summary */}
          <Card className="glass-card mb-8">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Report Summary</span>
                <Badge variant="outline">
                  Score: {reportSummary.overallScore}/100
                </Badge>
              </CardTitle>
              <CardDescription>
                Analysis completed on {reportSummary.analysisDate}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-destructive">{reportSummary.criticalIssues}</div>
                  <div className="text-sm text-muted-foreground">Critical Issues</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-warning">{reportSummary.warnings}</div>
                  <div className="text-sm text-muted-foreground">Warnings</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-success">${reportSummary.monthlySavings}</div>
                  <div className="text-sm text-muted-foreground">Monthly Savings</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-primary">{reportSummary.overallScore}</div>
                  <div className="text-sm text-muted-foreground">Health Score</div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Tabs defaultValue="export" className="space-y-6">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="export">Export Report</TabsTrigger>
              <TabsTrigger value="email">Send via Email</TabsTrigger>
              <TabsTrigger value="integrate">Integrations</TabsTrigger>
            </TabsList>

            {/* Export Tab */}
            <TabsContent value="export" className="space-y-6">
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle>Export Options</CardTitle>
                  <CardDescription>
                    Download your report in various formats
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Button variant="outline" className="h-20 flex-col space-y-2">
                      <Download className="w-6 h-6" />
                      <span>PDF Report</span>
                    </Button>
                    <Button variant="outline" className="h-20 flex-col space-y-2" onClick={copyReport}>
                      {copied ? (
                        <CheckCircle className="w-6 h-6 text-success" />
                      ) : (
                        <Copy className="w-6 h-6" />
                      )}
                      <span>{copied ? "Copied!" : "Copy Markdown"}</span>
                    </Button>
                    <Button variant="outline" className="h-20 flex-col space-y-2">
                      <FileText className="w-6 h-6" />
                      <span>Excel Report</span>
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Report Preview */}
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle>Report Preview</CardTitle>
                  <CardDescription>
                    Preview of your markdown report
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="bg-muted/20 rounded-lg p-4 max-h-96 overflow-y-auto">
                    <pre className="text-sm whitespace-pre-wrap font-mono">
                      {markdownReport}
                    </pre>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Email Tab */}
            <TabsContent value="email" className="space-y-6">
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle>Send via Email</CardTitle>
                  <CardDescription>
                    Email the report to team members or stakeholders
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="email-to">To</Label>
                    <Input
                      id="email-to"
                      placeholder="team@company.com, stakeholder@company.com"
                      value={emailData.to}
                      onChange={(e) => setEmailData({ ...emailData, to: e.target.value })}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="email-subject">Subject</Label>
                    <Input
                      id="email-subject"
                      value={emailData.subject}
                      onChange={(e) => setEmailData({ ...emailData, subject: e.target.value })}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="email-message">Message</Label>
                    <Textarea
                      id="email-message"
                      placeholder="Add a personal message..."
                      value={emailData.message}
                      onChange={(e) => setEmailData({ ...emailData, message: e.target.value })}
                      className="min-h-[100px]"
                    />
                  </div>

                  <Button className="w-full" variant="hero">
                    <Send className="w-4 h-4 mr-2" />
                    Send Report
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Integrations Tab */}
            <TabsContent value="integrate" className="space-y-6">
              <Card className="glass-card">
                <CardHeader>
                  <CardTitle>Team Integrations</CardTitle>
                  <CardDescription>
                    Connect with your team tools to share findings
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {integrations.map((integration) => {
                    const Icon = integration.icon;
                    return (
                      <div key={integration.name} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                            <Icon className="w-5 h-5 text-primary" />
                          </div>
                          <div>
                            <h3 className="font-semibold">{integration.name}</h3>
                            <p className="text-sm text-muted-foreground">{integration.description}</p>
                          </div>
                        </div>
                        <Button variant="outline" size="sm">
                          {integration.action}
                        </Button>
                      </div>
                    );
                  })}
                </CardContent>
              </Card>

              <Card className="glass-card">
                <CardHeader>
                  <CardTitle>Webhook Integration</CardTitle>
                  <CardDescription>
                    Send report data to custom webhook endpoints
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="webhook-url">Webhook URL</Label>
                    <Input
                      id="webhook-url"
                      placeholder="https://your-webhook-endpoint.com/stackstage"
                    />
                  </div>
                  <Button variant="outline" className="w-full">
                    <Send className="w-4 h-4 mr-2" />
                    Send to Webhook
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>

          {/* Quick Actions */}
          <div className="mt-12 text-center">
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button variant="outline" size="lg" asChild>
                <Link to="/results">
                  Back to Results
                </Link>
              </Button>
              <Button variant="outline" size="lg" asChild>
                <Link to="/results/fixes">
                  View Fixes
                </Link>
              </Button>
              <Button variant="hero" size="lg" asChild>
                <Link to="/analyze">
                  New Analysis
                </Link>
              </Button>
            </div>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default Share;